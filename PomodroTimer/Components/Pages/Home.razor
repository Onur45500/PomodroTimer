@page "/"

@rendermode InteractiveServer

<div class="d-flex flex-column align-items-center justify-content-center" style="height: 100vh;">
    <PageTitle>Pomodoro Timer</PageTitle>

    <h1>Pomodoro Timer</h1>

    <p role="status">Time left: @timeLeft</p>

    <p>Session: @sessionType</p>

    <div>
        <button class="btn @startPauseButtonClass" @onclick="StartPauseTimer" style="transition: background-color 0.3s, color 0.3s;">
            @((isTimerRunning ? "Pause" : "Start"))
        </button>

        <button class="btn btn-danger" @onclick="ResetTimer">
            Reset
        </button>
    </div>
    <button class="btn btn-success mt-2" @onclick="StartBreakTimer">
        Get a Break (5 mins)
    </button>
</div>

@code {
    private TimeSpan timeLeft = TimeSpan.FromMinutes(25); // Initial Pomodoro time
    private string sessionType = "Work Session"; // Default session type
    private bool isTimerRunning = false;
    private System.Threading.Timer? timer;
    private int pomodoroDuration = 25; // in minutes
    private int shortBreakDuration = 5; // in minutes

    // Dynamically change button color
    private string startPauseButtonClass => isTimerRunning ? "btn-warning" : "btn-primary";

    // Start or pause the timer
    private void StartPauseTimer()
    {
        if (isTimerRunning)
        {
            // Pause the timer
            isTimerRunning = false;
            timer?.Change(Timeout.Infinite, 0); // Stop the timer
        }
        else
        {
            // Start the timer or resume if it was paused
            isTimerRunning = true;
            timer ??= new System.Threading.Timer(UpdateTimer, null, 1000, 1000);
            timer.Change(1000, 1000); // Resume the timer if it was paused
        }

        // Force UI refresh immediately after state change
        InvokeAsync(StateHasChanged);
    }

    // Update the timer each second
    private void UpdateTimer(object? state)
    {
        if (timeLeft.TotalSeconds > 0)
        {
            timeLeft = timeLeft.Subtract(TimeSpan.FromSeconds(1));
            InvokeAsync(StateHasChanged); // Update UI
        }
        else
        {
            timer?.Dispose();
            timer = null; // Set the timer to null after it finishes
            TimerFinished();
        }
    }

    // Handle when the timer reaches 0
    private void TimerFinished()
    {
        isTimerRunning = false;
        if (sessionType == "Work Session")
        {
            sessionType = "Short Break";
            timeLeft = TimeSpan.FromMinutes(shortBreakDuration);
        }
        else
        {
            timeLeft = TimeSpan.FromMinutes(pomodoroDuration);
            sessionType = "Work Session";
        }
        InvokeAsync(StateHasChanged); // Update UI
    }

    // Reset the timer
    private void ResetTimer()
    {
        isTimerRunning = false;
        timer?.Dispose();
        timer = null; // Reset the timer to null
        timeLeft = TimeSpan.FromMinutes(pomodoroDuration);
        sessionType = "Work Session";

        // Force UI refresh
        InvokeAsync(StateHasChanged);
    }

    // Start a 5-minute break timer, interrupting any running session
    private void StartBreakTimer()
    {
        // Interrupt the current session and start the break timer
        isTimerRunning = true;
        sessionType = "Break";
        timeLeft = TimeSpan.FromMinutes(5);

        // Ensure the timer is set or updated to run every second
        if (timer == null)
        {
            timer = new System.Threading.Timer(UpdateTimer, null, 1000, 1000);
        }
        else
        {
            timer.Change(1000, 1000); // Restart the timer for the break
        }

        // Force UI refresh
        InvokeAsync(StateHasChanged);
    }
}
